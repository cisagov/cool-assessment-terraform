# Security group for the PenTest Portal instances
resource "aws_security_group" "pentestportal" {
  provider = aws.provisionassessment

  tags = {
    Name = "PenTest Portal"
  }
  vpc_id = aws_vpc.assessment.id
}

# Allow ingress from Kali instances via ports 22, 443, and 8080
#
# For: Assessment team SSH and HTTPS access to PenTest Portal (development and
# production modes) from Kali instances
resource "aws_security_group_rule" "pentestportal_ingress_from_kali_via_ssh_and_web" {
  for_each = toset(["22", "443", "8080"])
  provider = aws.provisionassessment

  from_port                = each.key
  protocol                 = "tcp"
  security_group_id        = aws_security_group.pentestportal.id
  source_security_group_id = aws_security_group.kali.id
  to_port                  = each.key
  type                     = "ingress"
}

# Allow ingress from Windows instances via ports 443 and 8080
#
# For: Assessment team HTTPS access to PenTest Portal (development and
# production modes) from Windows instances
resource "aws_security_group_rule" "pentestportal_ingress_from_windows_via_web" {
  for_each = toset(["443", "8080"])
  provider = aws.provisionassessment

  from_port                = each.key
  protocol                 = "tcp"
  security_group_id        = aws_security_group.pentestportal.id
  source_security_group_id = aws_security_group.windows.id
  to_port                  = each.key
  type                     = "ingress"
}

# Allow egress to anywhere via HTTP and HTTPS
#
# For: PenTest Portal installation dependencies
resource "aws_security_group_rule" "pentestportal_egress_to_anywhere_via_http_and_https" {
  for_each = toset(["80", "443"])
  provider = aws.provisionassessment

  cidr_blocks       = ["0.0.0.0/0"]
  from_port         = each.key
  protocol          = "tcp"
  security_group_id = aws_security_group.pentestportal.id
  to_port           = each.key
  type              = "egress"
}

# Allow ingress from anywhere via the allowed ports
resource "aws_security_group_rule" "ingress_from_anywhere_to_pentestportal_via_allowed_ports" {
  # for_each will only accept a map or a list of strings, so we have
  # to do a little finagling to get the list of port objects into an
  # acceptable form.
  for_each = { for d in var.inbound_ports_allowed["pentestportal"] : format("%s_%d_%d", d.protocol, d.from_port, d.to_port) => d }
  provider = aws.provisionassessment

  cidr_blocks       = ["0.0.0.0/0"]
  from_port         = each.value["from_port"]
  protocol          = each.value["protocol"]
  security_group_id = aws_security_group.pentestportal.id
  to_port           = each.value["to_port"]
  type              = "ingress"
}
